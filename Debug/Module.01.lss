
Module.01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a30  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af2  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099b  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  000034a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000849  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e04  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004e81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2f 00 	jmp	0x5e	; 0x5e <__dtors_end>
   4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_1>
   8:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_2>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_4>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_7>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_10>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	4f 69       	ori	r20, 0x9F	; 159
  56:	64 61       	ori	r22, 0x14	; 20
	...

0000005a <__ctors_start>:
  5a:	92 01       	movw	r18, r4

0000005c <__ctors_end>:
  5c:	97 01       	movw	r18, r14

0000005e <__dtors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d8 e0       	ldi	r29, 0x08	; 8
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_clear_bss>:
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	a0 e6       	ldi	r26, 0x60	; 96
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	a1 36       	cpi	r26, 0x61	; 97
  76:	b2 07       	cpc	r27, r18
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>

0000007a <__do_global_ctors>:
  7a:	10 e0       	ldi	r17, 0x00	; 0
  7c:	ce e2       	ldi	r28, 0x2E	; 46
  7e:	d0 e0       	ldi	r29, 0x00	; 0
  80:	04 c0       	rjmp	.+8      	; 0x8a <__do_global_ctors+0x10>
  82:	21 97       	sbiw	r28, 0x01	; 1
  84:	fe 01       	movw	r30, r28
  86:	0e 94 c0 01 	call	0x380	; 0x380 <__tablejump2__>
  8a:	cd 32       	cpi	r28, 0x2D	; 45
  8c:	d1 07       	cpc	r29, r17
  8e:	c9 f7       	brne	.-14     	; 0x82 <__do_global_ctors+0x8>
  90:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  94:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__do_global_dtors>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <_ZN3LCDC1Ev>:
void LCD::print(int num)
{
	char buf[16];
	itoa(num, &buf[0], 10);
	print(&buf[0]);
}
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	87 bb       	out	0x17, r24	; 23
  a0:	08 95       	ret

000000a2 <_ZN3LCDD1Ev>:
  a2:	08 95       	ret

000000a4 <_ZN3LCD5delayEi>:
  a4:	16 16       	cp	r1, r22
  a6:	17 06       	cpc	r1, r23
  a8:	9c f4       	brge	.+38     	; 0xd0 <_ZN3LCD5delayEi+0x2c>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	81 e1       	ldi	r24, 0x11	; 17
  b0:	95 e0       	ldi	r25, 0x05	; 5
	...
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	b1 f7       	brne	.-20     	; 0xb2 <_ZN3LCD5delayEi+0xe>
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	62 17       	cp	r22, r18
  cc:	73 07       	cpc	r23, r19
  ce:	79 f7       	brne	.-34     	; 0xae <_ZN3LCD5delayEi+0xa>
  d0:	08 95       	ret

000000d2 <_ZN3LCD6setLEDEb>:
  d2:	66 23       	and	r22, r22
  d4:	11 f0       	breq	.+4      	; 0xda <_ZN3LCD6setLEDEb+0x8>
  d6:	c3 9a       	sbi	0x18, 3	; 24
  d8:	08 95       	ret
  da:	c3 98       	cbi	0x18, 3	; 24
  dc:	08 95       	ret

000000de <_ZN3LCD6enableEv>:
  de:	c2 9a       	sbi	0x18, 2	; 24
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	00 00       	nop
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	e9 f7       	brne	.-6      	; 0xe4 <_ZN3LCD6enableEv+0x6>
  ea:	c2 98       	cbi	0x18, 2	; 24
  ec:	08 95       	ret

000000ee <_ZN3LCD11writeNibbleEc>:
  ee:	28 b3       	in	r18, 0x18	; 24
  f0:	2f 70       	andi	r18, 0x0F	; 15
  f2:	28 bb       	out	0x18, r18	; 24
  f4:	28 b3       	in	r18, 0x18	; 24
  f6:	62 95       	swap	r22
  f8:	60 7f       	andi	r22, 0xF0	; 240
  fa:	62 2b       	or	r22, r18
  fc:	68 bb       	out	0x18, r22	; 24
  fe:	0e 94 6f 00 	call	0xde	; 0xde <_ZN3LCD6enableEv>
 102:	08 95       	ret

00000104 <_ZN3LCD7putCharEc>:
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	8c 01       	movw	r16, r24
 10c:	c6 2f       	mov	r28, r22
 10e:	c0 9a       	sbi	0x18, 0	; 24
 110:	60 7f       	andi	r22, 0xF0	; 240
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	75 95       	asr	r23
 116:	67 95       	ror	r22
 118:	75 95       	asr	r23
 11a:	67 95       	ror	r22
 11c:	75 95       	asr	r23
 11e:	67 95       	ror	r22
 120:	75 95       	asr	r23
 122:	67 95       	ror	r22
 124:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
 128:	6c 2f       	mov	r22, r28
 12a:	6f 70       	andi	r22, 0x0F	; 15
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
 132:	c0 98       	cbi	0x18, 0	; 24
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <_ZN3LCD7print_PEPKc>:
 * PSTR("<string to print>");
 * which requires the header file <avr/pgmspace.h>.
 * @param str zero-terminated string to print in program memory
 */
void LCD::print_P(const char * str)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	fb 01       	movw	r30, r22
	uint8_t i = 1;
	char c = pgm_read_byte(str);
 148:	64 91       	lpm	r22, Z
	while(c != 0)
 14a:	66 23       	and	r22, r22
 14c:	69 f0       	breq	.+26     	; 0x168 <_ZN3LCD7print_PEPKc+0x2c>
 14e:	8f 01       	movw	r16, r30
 150:	7c 01       	movw	r14, r24
 152:	c1 e0       	ldi	r28, 0x01	; 1
	{
		putChar(c);
 154:	c7 01       	movw	r24, r14
 156:	0e 94 82 00 	call	0x104	; 0x104 <_ZN3LCD7putCharEc>
		c = pgm_read_byte(str+i);
 15a:	f8 01       	movw	r30, r16
 15c:	ec 0f       	add	r30, r28
 15e:	f1 1d       	adc	r31, r1
 160:	64 91       	lpm	r22, Z
		i++;
 162:	cf 5f       	subi	r28, 0xFF	; 255
 */
void LCD::print_P(const char * str)
{
	uint8_t i = 1;
	char c = pgm_read_byte(str);
	while(c != 0)
 164:	61 11       	cpse	r22, r1
 166:	f6 cf       	rjmp	.-20     	; 0x154 <_ZN3LCD7print_PEPKc+0x18>
	{
		putChar(c);
		c = pgm_read_byte(str+i);
		i++;
	}
}
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	08 95       	ret

00000174 <_ZN3LCD6putCmdEh>:
 * @brief Sends the command to the display
 * @param c command to send. See the private static const uint8_t
 * for command set.
 */
void LCD::putCmd(uint8_t c)
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	8c 01       	movw	r16, r24
 17c:	c6 2f       	mov	r28, r22
	char nibble = c & 0xF0;
	nibble = (nibble>>4);
 17e:	60 7f       	andi	r22, 0xF0	; 240
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	75 95       	asr	r23
 184:	67 95       	ror	r22
 186:	75 95       	asr	r23
 188:	67 95       	ror	r22
 18a:	75 95       	asr	r23
 18c:	67 95       	ror	r22
 18e:	75 95       	asr	r23
 190:	67 95       	ror	r22
	writeNibble(nibble);
 192:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>

	nibble = c & 0x0F;
	writeNibble(nibble);
 196:	6c 2f       	mov	r22, r28
 198:	6f 70       	andi	r22, 0x0F	; 15
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
}
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <_ZN3LCD4initEv>:
LCD::~LCD()
{
}

void LCD::init()
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	// Prepare the Port: EN has to be high, falling edge signals "Enable"
	PORT_LCD = (1<<PIN_LCD_EN);
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	88 bb       	out	0x18, r24	; 24

	writeNibble(LCD_CMD_DISPLAY_INIT);	delay(15);
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
 1ba:	6f e0       	ldi	r22, 0x0F	; 15
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	writeNibble(LCD_CMD_DISPLAY_INIT);	delay(15);
 1c4:	63 e0       	ldi	r22, 0x03	; 3
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
 1cc:	6f e0       	ldi	r22, 0x0F	; 15
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	writeNibble(LCD_CMD_DISPLAY_INIT);	delay(15);
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	ce 01       	movw	r24, r28
 1da:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
 1de:	6f e0       	ldi	r22, 0x0F	; 15
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	writeNibble(LCD_CMD_RETURN_HOME);	delay(5);
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 77 00 	call	0xee	; 0xee <_ZN3LCD11writeNibbleEc>
 1f0:	65 e0       	ldi	r22, 0x05	; 5
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	putCmd(LCD_CMD_DISPLAY_CLEAR);		delay(5);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN3LCD6putCmdEh>
 202:	65 e0       	ldi	r22, 0x05	; 5
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	ce 01       	movw	r24, r28
 208:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	putCmd(LCD_CMD_DISPLAY_OFF);		delay(5);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN3LCD6putCmdEh>
 214:	65 e0       	ldi	r22, 0x05	; 5
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	ce 01       	movw	r24, r28
 21a:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	putCmd(LCD_CMD_SET_2LINE);			delay(5);
 21e:	6c e2       	ldi	r22, 0x2C	; 44
 220:	ce 01       	movw	r24, r28
 222:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN3LCD6putCmdEh>
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	ce 01       	movw	r24, r28
 22c:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	putCmd(LCD_CMD_DISPLAY_CLEAR);		delay(5);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	ce 01       	movw	r24, r28
 234:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN3LCD6putCmdEh>
 238:	65 e0       	ldi	r22, 0x05	; 5
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
	putCmd(LCD_CMD_DISPLAY_ON);			delay(5);
 242:	6c e0       	ldi	r22, 0x0C	; 12
 244:	ce 01       	movw	r24, r28
 246:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN3LCD6putCmdEh>
 24a:	65 e0       	ldi	r22, 0x05	; 5
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN3LCD5delayEi>
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <__vector_10>:
/**
 * Blink - using Duty Cycle
 * 
 */
void blink()
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	12 be       	out	0x32, r1	; 50
 26a:	94 b3       	in	r25, 0x14	; 20
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	89 27       	eor	r24, r25
 270:	84 bb       	out	0x14, r24	; 20
 272:	78 94       	sei
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_7>:
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_4>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_1>:
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_2>:
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <_Z11bootMessagev>:
 2d2:	0e 94 ae 01 	call	0x35c	; 0x35c <_Z4Bippv>
 2d6:	0e 94 9c 01 	call	0x338	; 0x338 <_Z4Beepv>
 2da:	0e 94 ae 01 	call	0x35c	; 0x35c <_Z4Bippv>
 2de:	64 e5       	ldi	r22, 0x54	; 84
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e6       	ldi	r24, 0x60	; 96
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN3LCD7print_PEPKc>
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	80 e6       	ldi	r24, 0x60	; 96
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN3LCD6setLEDEb>
 2f4:	08 95       	ret

000002f6 <_Z12bootSequencev>:
 2f6:	8f 9a       	sbi	0x11, 7	; 17
 2f8:	80 e6       	ldi	r24, 0x60	; 96
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN3LCD4initEv>
 300:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z11bootMessagev>
 304:	08 95       	ret

00000306 <_Z22timerInterruptSolutionv>:
 306:	f8 94       	cli
 308:	83 b7       	in	r24, 0x33	; 51
 30a:	83 60       	ori	r24, 0x03	; 3
 30c:	83 bf       	out	0x33, r24	; 51
 30e:	89 b7       	in	r24, 0x39	; 57
 310:	82 60       	ori	r24, 0x02	; 2
 312:	89 bf       	out	0x39, r24	; 57
 314:	8d e7       	ldi	r24, 0x7D	; 125
 316:	8c bf       	out	0x3c, r24	; 60
 318:	78 94       	sei
 31a:	ff cf       	rjmp	.-2      	; 0x31a <_Z22timerInterruptSolutionv+0x14>

0000031c <main>:
 31c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z12bootSequencev>
 320:	0e 94 83 01 	call	0x306	; 0x306 <_Z22timerInterruptSolutionv>

00000324 <_GLOBAL__sub_I_EventTrigger_Event1>:


///////////////////////////////////////////////////////////////////////////////////
// System-wide used Class instances

		LCD								lcd;
 324:	80 e6       	ldi	r24, 0x60	; 96
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 4e 00 	call	0x9c	; 0x9c <_ZN3LCDC1Ev>
 32c:	08 95       	ret

0000032e <_GLOBAL__sub_D_EventTrigger_Event1>:
 32e:	80 e6       	ldi	r24, 0x60	; 96
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 51 00 	call	0xa2	; 0xa2 <_ZN3LCDD1Ev>
 336:	08 95       	ret

00000338 <_Z4Beepv>:
#include <avr/io.h>
#include "../BoardConfig.h"
#include "glLib.h"

void Beep()
{
 338:	2c e2       	ldi	r18, 0x2C	; 44
 33a:	31 e0       	ldi	r19, 0x01	; 1
	int i, h;
	for(i = 0; i < 300; i++)
	{
		PORT_SPEAKER |= (1<<PIN_SPEAKER);
 33c:	97 9a       	sbi	0x12, 7	; 18
 33e:	80 e9       	ldi	r24, 0x90	; 144
 340:	91 e0       	ldi	r25, 0x01	; 1
		for (h=400;h>0;h--) {asm volatile("nop");}
 342:	00 00       	nop
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	e9 f7       	brne	.-6      	; 0x342 <_Z4Beepv+0xa>
		PORT_SPEAKER &=~ (1<<PIN_SPEAKER);
 348:	97 98       	cbi	0x12, 7	; 18
 34a:	80 e9       	ldi	r24, 0x90	; 144
 34c:	91 e0       	ldi	r25, 0x01	; 1
		for (h=400;h>0;h--) {asm volatile("nop");}
 34e:	00 00       	nop
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	e9 f7       	brne	.-6      	; 0x34e <_Z4Beepv+0x16>
 354:	21 50       	subi	r18, 0x01	; 1
 356:	31 09       	sbc	r19, r1
#include "glLib.h"

void Beep()
{
	int i, h;
	for(i = 0; i < 300; i++)
 358:	89 f7       	brne	.-30     	; 0x33c <_Z4Beepv+0x4>
		PORT_SPEAKER |= (1<<PIN_SPEAKER);
		for (h=400;h>0;h--) {asm volatile("nop");}
		PORT_SPEAKER &=~ (1<<PIN_SPEAKER);
		for (h=400;h>0;h--) {asm volatile("nop");}
	}
}
 35a:	08 95       	ret

0000035c <_Z4Bippv>:

void Bipp()
{
 35c:	22 e3       	ldi	r18, 0x32	; 50
 35e:	30 e0       	ldi	r19, 0x00	; 0

	int i, h;
	for(i = 0; i < 50; i++)
	{
		PORT_SPEAKER |= (1<<PIN_SPEAKER);
 360:	97 9a       	sbi	0x12, 7	; 18
 362:	8c e2       	ldi	r24, 0x2C	; 44
 364:	91 e0       	ldi	r25, 0x01	; 1
		for (h=300;h>0;h--) {asm volatile("nop");}
 366:	00 00       	nop
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	e9 f7       	brne	.-6      	; 0x366 <_Z4Bippv+0xa>
		PORT_SPEAKER &=~ (1<<PIN_SPEAKER);
 36c:	97 98       	cbi	0x12, 7	; 18
 36e:	8c e2       	ldi	r24, 0x2C	; 44
 370:	91 e0       	ldi	r25, 0x01	; 1
		for (h=300;h>0;h--) {asm volatile("nop");}
 372:	00 00       	nop
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	e9 f7       	brne	.-6      	; 0x372 <_Z4Bippv+0x16>
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	31 09       	sbc	r19, r1

void Bipp()
{

	int i, h;
	for(i = 0; i < 50; i++)
 37c:	89 f7       	brne	.-30     	; 0x360 <_Z4Bippv+0x4>
		for (h=300;h>0;h--) {asm volatile("nop");}
		PORT_SPEAKER &=~ (1<<PIN_SPEAKER);
		for (h=300;h>0;h--) {asm volatile("nop");}
	}

}
 37e:	08 95       	ret

00000380 <__tablejump2__>:
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	05 90       	lpm	r0, Z+
 386:	f4 91       	lpm	r31, Z
 388:	e0 2d       	mov	r30, r0
 38a:	09 94       	ijmp

0000038c <__do_global_dtors>:
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	ce e2       	ldi	r28, 0x2E	; 46
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	04 c0       	rjmp	.+8      	; 0x39c <__do_global_dtors+0x10>
 394:	fe 01       	movw	r30, r28
 396:	0e 94 c0 01 	call	0x380	; 0x380 <__tablejump2__>
 39a:	21 96       	adiw	r28, 0x01	; 1
 39c:	cf 32       	cpi	r28, 0x2F	; 47
 39e:	d1 07       	cpc	r29, r17
 3a0:	c9 f7       	brne	.-14     	; 0x394 <__do_global_dtors+0x8>
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
